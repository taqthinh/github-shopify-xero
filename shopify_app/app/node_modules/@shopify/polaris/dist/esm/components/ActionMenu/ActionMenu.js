import { objectWithoutProperties as _objectWithoutProperties } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React$1, { PureComponent } from 'react';
import { FeaturesContext } from '../../utilities/features/context.js';
import { classNames } from '../../utilities/css.js';
import { Button as Button$1 } from '../Button/Button.js';
import { ButtonGroup as ButtonGroup$1 } from '../ButtonGroup/ButtonGroup.js';
import { sortAndOverrideActionOrder } from './utilities.js';
import { MenuAction as MenuAction$1 } from './components/MenuAction/MenuAction.js';
import { MenuGroup as MenuGroup$1 } from './components/MenuGroup/MenuGroup.js';
import { RollupActions as RollupActions$1 } from './components/RollupActions/RollupActions.js';
import styles from './ActionMenu.scss.js';

class ActionMenu extends PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      activeMenuGroup: undefined
    };

    this.renderActions = () => {
      var {
        newDesignLanguage
      } = this.context || {};
      var {
        actions = [],
        groups = []
      } = this.props;
      var {
        activeMenuGroup
      } = this.state;
      var menuActions = [...actions, ...groups];
      var overriddenActions = sortAndOverrideActionOrder(menuActions);
      var actionMarkup = overriddenActions.map((action, index) => {
        if ('title' in action) {
          var {
            title,
            actions: _actions
          } = action,
              _rest = _objectWithoutProperties(action, ["title", "actions"]);

          return _actions.length > 0 ? /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({
            key: "MenuGroup-".concat(index),
            title: title,
            active: title === activeMenuGroup,
            actions: _actions
          }, _rest, {
            onOpen: this.handleMenuGroupToggle,
            onClose: this.handleMenuGroupClose
          })) : null;
        }

        var {
          content,
          onAction
        } = action,
            rest = _objectWithoutProperties(action, ["content", "onAction"]);

        return newDesignLanguage ? /*#__PURE__*/React$1.createElement(Button$1, Object.assign({
          key: index,
          onClick: onAction
        }, rest), content) : /*#__PURE__*/React$1.createElement(MenuAction$1, Object.assign({
          key: "MenuAction-".concat(index),
          content: content,
          onAction: onAction
        }, rest));
      });
      return /*#__PURE__*/React$1.createElement("div", {
        className: styles.ActionsLayout
      }, newDesignLanguage ? /*#__PURE__*/React$1.createElement(ButtonGroup$1, null, actionMarkup) : actionMarkup);
    };

    this.handleMenuGroupToggle = group => {
      this.setState(({
        activeMenuGroup
      }) => ({
        activeMenuGroup: activeMenuGroup ? undefined : group
      }));
    };

    this.handleMenuGroupClose = () => {
      this.setState({
        activeMenuGroup: undefined
      });
    };
  }

  render() {
    var {
      actions = [],
      groups = [],
      rollup
    } = this.props;

    if (actions.length === 0 && groups.length === 0) {
      return null;
    }

    var actionMenuClassNames = classNames(styles.ActionMenu, rollup && styles.rollup);
    var rollupSections = groups.map(group => convertGroupToSection(group));
    return /*#__PURE__*/React$1.createElement("div", {
      className: actionMenuClassNames
    }, rollup ? /*#__PURE__*/React$1.createElement(RollupActions$1, {
      items: actions,
      sections: rollupSections
    }) : this.renderActions());
  } // eslint-disable-next-line @shopify/react-no-multiple-render-methods


}
ActionMenu.contextType = FeaturesContext;
function hasGroupsWithActions(groups = []) {
  return groups.length === 0 ? false : groups.some(group => group.actions.length > 0);
}

function convertGroupToSection({
  title,
  actions
}) {
  return {
    title,
    items: actions
  };
}

export { ActionMenu, hasGroupsWithActions };
