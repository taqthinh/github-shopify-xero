import React$1, { PureComponent, createRef } from 'react';
import { FeaturesContext } from '../../utilities/features/context.js';
import { classNames, variationName } from '../../utilities/css.js';
import { CancelSmallMinor, CircleInformationMajorFilled, FlagMajorTwotone, CircleDisabledMajorFilled, CircleDisabledMajorTwotone, CircleAlertMajorFilled, CircleAlertMajorTwotone, CircleInformationMajorTwotone, CircleTickMajorFilled, CircleTickMajorTwotone } from '@shopify/polaris-icons';
import { UnstyledLink as UnstyledLink$1 } from '../UnstyledLink/UnstyledLink.js';
import { Icon as Icon$1 } from '../Icon/Icon.js';
import { Button as Button$1 } from '../Button/Button.js';
import { buttonFrom } from '../Button/utils.js';
import { WithinContentContext } from '../../utilities/within-content-context.js';
import { ButtonGroup as ButtonGroup$1 } from '../ButtonGroup/ButtonGroup.js';
import { Heading as Heading$1 } from '../Heading/Heading.js';
import { BannerContext } from '../../utilities/banner-context.js';
import styles from './Banner.scss.js';

class Banner extends PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      showFocus: false
    };
    this.wrapper = /*#__PURE__*/createRef();
  }

  focus() {
    this.wrapper.current && this.wrapper.current.focus();
    this.setState({
      showFocus: true
    });
  }

  render() {
    var {
      newDesignLanguage
    } = this.context || {};
    var {
      showFocus
    } = this.state;

    var handleKeyUp = evt => {
      if (evt.target === this.wrapper.current) {
        this.setState({
          showFocus: true
        });
      }
    };

    var handleBlur = () => {
      this.setState({
        showFocus: false
      });
    };

    var handleMouseUp = ({
      currentTarget
    }) => {
      var {
        showFocus
      } = this.state;
      currentTarget.blur();
      showFocus && this.setState({
        showFocus: false
      });
    };

    return /*#__PURE__*/React$1.createElement(BannerContext.Provider, {
      value: true
    }, /*#__PURE__*/React$1.createElement(WithinContentContext.Consumer, null, withinContentContainer => {
      var {
        icon,
        action,
        secondaryAction,
        title,
        children,
        status,
        onDismiss,
        stopAnnouncements
      } = this.props;
      var color;
      var defaultIcon;
      var ariaRoleType = 'status';

      switch (status) {
        case 'success':
          color = newDesignLanguage ? 'success' : 'greenDark';
          defaultIcon = newDesignLanguage ? CircleTickMajorFilled : CircleTickMajorTwotone;
          break;

        case 'info':
          color = newDesignLanguage ? 'highlight' : 'tealDark';
          defaultIcon = newDesignLanguage ? CircleInformationMajorFilled : CircleInformationMajorTwotone;
          break;

        case 'warning':
          color = newDesignLanguage ? 'warning' : 'yellowDark';
          defaultIcon = newDesignLanguage ? CircleAlertMajorFilled : CircleAlertMajorTwotone;
          ariaRoleType = 'alert';
          break;

        case 'critical':
          color = newDesignLanguage ? 'critical' : 'redDark';
          defaultIcon = newDesignLanguage ? CircleDisabledMajorFilled : CircleDisabledMajorTwotone;
          ariaRoleType = 'alert';
          break;

        default:
          color = newDesignLanguage ? 'base' : 'inkLighter';
          defaultIcon = newDesignLanguage ? CircleInformationMajorFilled : FlagMajorTwotone;
      }

      var className = classNames(styles.Banner, status && styles[variationName('status', status)], onDismiss && styles.hasDismiss, showFocus && styles.keyFocused, withinContentContainer ? styles.withinContentContainer : styles.withinPage, newDesignLanguage && styles.newDesignLanguage);
      var id = uniqueID();
      var iconName = icon || defaultIcon;
      var headingMarkup = null;
      var headingID;

      if (title) {
        headingID = "".concat(id, "Heading");
        headingMarkup = /*#__PURE__*/React$1.createElement("div", {
          className: styles.Heading,
          id: headingID
        }, /*#__PURE__*/React$1.createElement(Heading$1, {
          element: "p"
        }, title));
      }

      var buttonSizeValue = withinContentContainer ? 'slim' : undefined;
      var secondaryActionMarkup = secondaryAction ? secondaryActionFrom(secondaryAction) : null;
      var actionMarkup = action ? /*#__PURE__*/React$1.createElement("div", {
        className: styles.Actions
      }, /*#__PURE__*/React$1.createElement(ButtonGroup$1, null, /*#__PURE__*/React$1.createElement("div", {
        className: styles.PrimaryAction
      }, buttonFrom(action, {
        outline: true,
        size: buttonSizeValue
      })), secondaryActionMarkup)) : null;
      var contentMarkup = null;
      var contentID;

      if (children || actionMarkup) {
        contentID = "".concat(id, "Content");
        contentMarkup = /*#__PURE__*/React$1.createElement("div", {
          className: styles.Content,
          id: contentID
        }, children, actionMarkup);
      }

      var dismissButton = onDismiss ? /*#__PURE__*/React$1.createElement("div", {
        className: styles.Dismiss
      }, /*#__PURE__*/React$1.createElement(Button$1, {
        plain: true,
        icon: CancelSmallMinor,
        onClick: onDismiss,
        accessibilityLabel: "Dismiss notification"
      })) : null;
      return /*#__PURE__*/React$1.createElement("div", {
        className: className // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        ,
        tabIndex: 0,
        ref: this.wrapper,
        role: ariaRoleType,
        "aria-live": stopAnnouncements ? 'off' : 'polite',
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onBlur: handleBlur,
        "aria-labelledby": headingID,
        "aria-describedby": contentID
      }, dismissButton, /*#__PURE__*/React$1.createElement("div", {
        className: styles.Ribbon
      }, /*#__PURE__*/React$1.createElement(Icon$1, {
        source: iconName,
        color: color,
        backdrop: !newDesignLanguage
      })), /*#__PURE__*/React$1.createElement("div", {
        className: styles.ContentWrapper
      }, headingMarkup, contentMarkup));
    }));
  }

}
Banner.contextType = FeaturesContext;
var index = 1;

function uniqueID() {
  return "Banner".concat(index++);
}

function secondaryActionFrom(action) {
  if (action.url) {
    return /*#__PURE__*/React$1.createElement(UnstyledLink$1, {
      className: styles.SecondaryAction,
      url: action.url,
      external: action.external
    }, /*#__PURE__*/React$1.createElement("span", {
      className: styles.Text
    }, action.content));
  }

  return /*#__PURE__*/React$1.createElement("button", {
    className: styles.SecondaryAction,
    onClick: action.onAction
  }, /*#__PURE__*/React$1.createElement("span", {
    className: styles.Text
  }, action.content));
}

export { Banner };
