import React$1, { useContext } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { useI18n } from '../../../../utilities/i18n/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { DragDropMajorMonotone } from '@shopify/polaris-icons';
import { Icon as Icon$1 } from '../../../Icon/Icon.js';
import { TextStyle as TextStyle$1 } from '../../../TextStyle/TextStyle.js';
import { Stack as Stack$1 } from '../../../Stack/Stack.js';
import { Caption as Caption$1 } from '../../../Caption/Caption.js';
import { capitalize as capitalize$1 } from '../../../../utilities/capitalize.js';
import img from '../../images/file-upload.svg.js';
import img$1 from '../../images/image-upload.svg.js';
import { DropZoneContext } from '../../context.js';
import styles from './FileUpload.scss.js';

var _ref = /*#__PURE__*/React$1.createElement(Stack$1, {
  vertical: true,
  spacing: "tight"
}, /*#__PURE__*/React$1.createElement(Icon$1, {
  source: DragDropMajorMonotone,
  color: "inkLightest"
}));

function FileUpload(props) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    size,
    measuring,
    type,
    focused,
    disabled
  } = useContext(DropZoneContext);
  var suffix = capitalize$1(type);
  var {
    actionTitle = i18n.translate("Polaris.DropZone.FileUpload.actionTitle".concat(suffix)),
    actionHint = i18n.translate("Polaris.DropZone.FileUpload.actionHint".concat(suffix))
  } = props;
  var imageClasses = classNames(styles.Image, size && size === 'extraLarge' && styles.sizeExtraLarge, size && size === 'large' && styles.sizeLarge);
  var buttonStyles = size === 'extraLarge' || size === 'large' ? classNames(styles.Button, newDesignLanguage && styles.newDesignLanguage, size && size !== 'extraLarge' && styles.slim, focused && styles.focused, disabled && styles.disabled) : null;
  var buttonMarkup = (size === 'extraLarge' || size === 'large') && buttonStyles ? /*#__PURE__*/React$1.createElement("div", {
    className: buttonStyles
  }, actionTitle) : null;
  var extraLargeView = size === 'extraLarge' ? /*#__PURE__*/React$1.createElement(Stack$1, {
    vertical: true
  }, type === 'file' && /*#__PURE__*/React$1.createElement("img", {
    className: imageClasses,
    src: img,
    alt: ""
  }), type === 'image' && /*#__PURE__*/React$1.createElement("img", {
    className: imageClasses,
    src: img$1,
    alt: ""
  }), buttonMarkup, /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, actionHint)) : null;
  var largeView = size === 'large' ? /*#__PURE__*/React$1.createElement(Stack$1, {
    vertical: true,
    spacing: "tight"
  }, type === 'file' && /*#__PURE__*/React$1.createElement("img", {
    className: imageClasses,
    src: img,
    alt: ""
  }), type === 'image' && /*#__PURE__*/React$1.createElement("img", {
    className: imageClasses,
    src: img$1,
    alt: ""
  }), buttonMarkup, /*#__PURE__*/React$1.createElement(Caption$1, null, /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, actionHint))) : null;
  var actionTitleClassName = classNames(styles.ActionTitle, focused && !disabled && styles['ActionTitle-focused'], disabled && styles['ActionTitle-disabled']);
  var actionTitleMarkup = /*#__PURE__*/React$1.createElement("div", {
    className: actionTitleClassName
  }, actionTitle);
  var mediumView = size === 'medium' ? /*#__PURE__*/React$1.createElement(Stack$1, {
    vertical: true,
    spacing: "tight"
  }, actionTitleMarkup, /*#__PURE__*/React$1.createElement(Caption$1, null, /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, actionHint))) : null;
  var smallView = size === 'small' ? _ref : null;
  var fileUploadClassName = classNames(styles.FileUpload, newDesignLanguage && styles.newDesignLanguage, measuring && styles.measuring);
  return /*#__PURE__*/React$1.createElement("div", {
    className: fileUploadClassName
  }, smallView, mediumView, largeView, extraLargeView);
}

export { FileUpload };
