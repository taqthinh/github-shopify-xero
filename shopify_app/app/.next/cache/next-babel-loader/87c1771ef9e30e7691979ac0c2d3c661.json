{"ast":null,"code":"var _jsxFileName = \"/home/thinh/Documents/odoo-13/customaddons/shopify_app/app/pages/index.js\";\nvar __jsx = React.createElement;\nimport { Frame, Toast, DataTable, DatePicker, Checkbox, Select, AppProvider, Card, TextField, Button, TextStyle, EmptyState, Form, FormLayout, Layout, Page } from '@shopify/polaris';\nimport React, { Component, useState, useCallback } from 'react';\nimport ReactDOM from \"react-dom\";\nimport '@shopify/polaris/dist/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nconst AppConfig = window.config;\nconsole.log(\"window.config.shopify_store.sale_account: \" + window.config.shopify_store.sale_account);\n\nclass AccountSettingForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_sale_account: AppConfig.shopify_store.sale_account,\n      current_shipping_account: AppConfig.shopify_store.shipping_account,\n      current_payment_account: AppConfig.shopify_store.payment_account,\n      current_auto_sync: AppConfig.shopify_store.auto_sync == 1 ? true : false,\n      sale_account_options: AppConfig.sale_accounts.map(account => ({\n        label: account.name,\n        value: account.code\n      })),\n      shipping_account_options: AppConfig.shipping_accounts.map(account => ({\n        label: account.name,\n        value: account.code\n      })),\n      payment_account_options: AppConfig.payment_accounts.map(account => ({\n        label: account.name,\n        value: account.code\n      }))\n    };\n    this.handleSaleAccountSelectChange = this.handleSaleAccountSelectChange.bind(this);\n    this.handleShippingAccountSelectChange = this.handleShippingAccountSelectChange.bind(this);\n    this.handlePaymentAccountSelectChange = this.handlePaymentAccountSelectChange.bind(this);\n    this.handleAutoSyncChange = this.handleAutoSyncChange.bind(this);\n  }\n\n  handleSaleAccountSelectChange(value) {\n    this.setState({\n      current_sale_account: value\n    });\n  }\n\n  handleShippingAccountSelectChange(value) {\n    this.setState({\n      current_shipping_account: value\n    });\n  }\n\n  handlePaymentAccountSelectChange(value) {\n    this.setState({\n      current_payment_account: value\n    });\n  }\n\n  handleAutoSyncChange(value) {\n    this.setState({\n      current_auto_sync: value\n    });\n  }\n\n  SaveSettingUrl() {\n    var current_sale_account = this.state.current_sale_account;\n    var current_shipping_account = this.state.current_shipping_account;\n    var current_payment_account = this.state.current_payment_account;\n    var current_auto_sync = '';\n\n    if (this.state.current_auto_sync == true) {\n      current_auto_sync = 'True';\n    }\n\n    let url = '/save_settings?sale_account=' + current_sale_account + '&shipping_account=' + current_shipping_account + '&payment_account=' + current_payment_account + '&auto_sync=' + current_auto_sync;\n    console.log(\"settings: \" + url);\n    return url;\n  }\n\n  render() {\n    return __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, __jsx(FormLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, __jsx(Select, {\n      name: \"sale_account\",\n      label: \"Sales Account\",\n      options: this.state.sale_account_options,\n      onChange: this.handleSaleAccountSelectChange,\n      value: this.state.current_sale_account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), __jsx(Select, {\n      name: \"shipping_account\",\n      label: \"Shipping Account\",\n      options: this.state.shipping_account_options,\n      onChange: this.handleShippingAccountSelectChange,\n      value: this.state.current_shipping_account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }), __jsx(Select, {\n      name: \"payment_account\",\n      label: \"Payment Account (Account with \\\"Enable payments to this account\\\" enabled):\",\n      options: this.state.payment_account_options,\n      onChange: this.handlePaymentAccountSelectChange,\n      value: this.state.current_payment_account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }), __jsx(Checkbox, {\n      name: \"auto_sync\",\n      label: \"Automatically Sync (at midnight everyday)\",\n      checked: this.state.current_auto_sync,\n      onChange: this.handleAutoSyncChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      onClick: event => location.href = this.SaveSettingUrl(),\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, \"Save Settings\")));\n  }\n\n}\n\nclass ExportForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: {\n        month: new Date().getMonth(),\n        year: new Date().getFullYear()\n      },\n      selectedDate: {\n        start: new Date(),\n        end: new Date()\n      }\n    };\n    this.handleSelectedDates = this.handleSelectedDates.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n  }\n\n  handleSelectedDates(value) {\n    this.setState({\n      selectedDate: value\n    });\n  }\n\n  handleMonthChange(value) {\n    this.setState({\n      date: value\n    });\n  }\n\n  SyncToXeroUrl() {\n    let from_date = new Date(this.state.selectedDate.start);\n    let to_date = new Date(this.state.selectedDate.end);\n    from_date = $.datepicker.formatDate('mm/dd/yy', from_date);\n    to_date = $.datepicker.formatDate('mm/dd/yy', to_date);\n    let url = '/sync_to_xero?from_date=' + from_date + '&to_date=' + to_date;\n    return url;\n  }\n\n  render() {\n    return __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, __jsx(DatePicker, {\n      month: this.state.date.month,\n      year: this.state.date.year,\n      onChange: this.handleSelectedDates,\n      onMonthChange: this.handleMonthChange,\n      selected: this.state.selectedDate,\n      multiMonth: true,\n      allowRange: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      onClick: event => location.href = this.SyncToXeroUrl(),\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"Export Data\"));\n  }\n\n}\n\nclass HistoryTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: AppConfig.logs,\n      orders_synced: AppConfig.shopify_store.orders_synced,\n      store_plan_order_number: AppConfig.shopify_store.store_plan_order_number\n    };\n  }\n\n  showPlanOrderNumber() {\n    if (this.state.store_plan_order_number > 0) {\n      return this.state.store_plan_order_number;\n    } else {\n      return 'Unlimited';\n    }\n  }\n\n  render() {\n    return __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, __jsx(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }, __jsx(Card.Section, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 23\n      }\n    }, \"History log of sync history, including automated jobs.\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, \"Orders synced this month: \", this.state.orders_synced), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }\n    }, \"Current Orders per plan: \", this.showPlanOrderNumber())), __jsx(DataTable, {\n      columnContentTypes: ['datetime', 'datetime', 'text', 'text'],\n      headings: ['Excution Time', 'Finish Time', 'Status', 'Message'],\n      rows: this.state.logs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    })));\n  }\n\n}\n\nclass PlanForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plans: AppConfig.plans,\n      current_plan_id: AppConfig.shopify_store.store_plan_id,\n      shop_url: AppConfig.shop_url\n    };\n  }\n\n  showPlanName(current_plan_id, plan_id, plan_name) {\n    if (current_plan_id == plan_id) {\n      return plan_name + \"(Current Plan)\";\n    } else {\n      return plan_name;\n    }\n  }\n\n  showPlanCost(cost) {\n    if (cost > 0) {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 20\n        }\n      }, __jsx(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 23\n        }\n      }, \"$\", cost, \"/month\"));\n    } else {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 20\n        }\n      }, __jsx(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 23\n        }\n      }, \"Free\"));\n    }\n  }\n\n  showPlanDescription(plan) {\n    if (plan.plan_name == \"Essential\") {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }\n      }, \"Sync Customers, Products, Orders to Xero\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }\n      }, \"Manually Sync in date range\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }\n      }, \"Automatic Updates every \", plan.plan_interval_number, \" hours\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }\n      }, \"Account Mapping\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      }, \"Synchronization History\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }\n      }, plan.plan_order_number, \" Orders/month\"));\n    } else if (plan.plan_name == \"Standard\") {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }\n      }, \"All Essential Features\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }, \"Automatic Updates every \", plan.plan_interval_number, \" hours\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }\n      }, \"Sync Gift Cards, Refunds to Xero\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }\n      }, plan.plan_order_number, \" Orders/month\"));\n    } else if (plan.plan_name == \"Professional\") {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }\n      }, \"All Standard Features\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }\n      }, \"Automatic Updates every \", plan.plan_interval_number, \" hours\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }\n      }, \"Sync Gift Cards, Refunds to Xero\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }\n      }, \"Unlimited Orders per month\"));\n    }\n  }\n\n  showSignUpPlanButton(plan, current_plan_id) {\n    let buttunId = \"signup\" + plan.plan_id;\n    let url = '/sign_up/' + plan.plan_id + '?shop_url=' + this.state.shop_url;\n\n    if (plan.plan_cost == 0 || current_plan_id == plan.plan_id) {\n      return null;\n    } else {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginTop: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        id: buttunId,\n        onClick: event => window.top.location.href = url,\n        primary: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }\n      }, \"Sign Up\"));\n    }\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, this.state.plans.map(plan => __jsx(Layout.Section, {\n      oneThird: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }\n    }, __jsx(Card, {\n      sectioned: true,\n      title: this.showPlanName(this.state.current_plan_id, plan.plan_id, plan.plan_name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    }, this.showPlanCost(plan.plan_cost), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 29\n      }\n    }), this.showPlanDescription(plan), this.showSignUpPlanButton(plan, this.state.current_plan_id)))));\n  }\n\n}\n\nclass DisconnectForm extends Component {\n  render() {\n    let OrganizationName = AppConfig.organisation_name;\n    return __jsx(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }, __jsx(Card.Section, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }\n    }, \"Organization Name: \", __jsx(TextStyle, {\n      variation: \"strong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 43\n      }\n    }, OrganizationName)), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }\n    }, \"Status:\", __jsx(TextStyle, {\n      variation: \"positive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 25\n      }\n    }, \"Connected\")), __jsx(Button, {\n      onClick: event => location.href = '/disconnect',\n      destructive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }\n    }, \"Disconnect From Xero\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }, \"Disconnect from Xero. Delete the credentials.\"), __jsx(TextStyle, {\n      variation: \"subdued\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }\n    }, \"Note: This will clear all Xero credentials. Cron will not run until you reconnect again.\")));\n  }\n\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: AppConfig.message\n    };\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  toggleActive() {\n    this.setState({\n      message: null\n    });\n  }\n\n  render() {\n    let message;\n\n    if (this.state.message) {\n      message = __jsx(Toast, {\n        content: this.state.message,\n        onDismiss: this.toggleActive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 23\n        }\n      });\n    }\n\n    return __jsx(AppProvider, {\n      i18n: translations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, __jsx(Frame, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }\n    }, message, __jsx(Page, {\n      title: \"General Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }, __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 23\n      }\n    }, __jsx(Layout.AnnotatedSection, {\n      description: __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 29\n        }\n      }, \"Please choose your account accordingly: \", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 71\n        }\n      }), \"- Sales Account will be applied to Invoice Line Items' Account\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 91\n        }\n      }), \"- Shipping Account will be applied to Shipping as an Invoice Line Item\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 99\n        }\n      }), \"- Payments will go to Payment Account on Xero\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, __jsx(AccountSettingForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 29\n      }\n    })))), __jsx(Page, {\n      title: \"Export To Xero\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 23\n      }\n    }, __jsx(Layout.AnnotatedSection, {\n      description: __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 29\n        }\n      }, \"- Choose date from and date to and export your data to Xero.\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 89\n        }\n      }), \"- Customers will be synced to Xero as: Shopify - \\\"Customer Name\\\" - (\\\"Customer Id\\\")\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 111\n        }\n      }), \"- Invoices will be synced to Xero as: Shopify - \\\"Order Id\\\"\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 87\n        }\n      }), \"- Products will be synced to Xero as Xero Items\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 25\n      }\n    }, __jsx(ExportForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 29\n      }\n    })))), __jsx(Page, {\n      title: \"History\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }\n    }, __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 23\n      }\n    }, __jsx(Layout.Section, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 27\n      }\n    }, __jsx(HistoryTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 29\n      }\n    })))), __jsx(Page, {\n      title: \"Plans\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }\n    }, __jsx(PlanForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 25\n      }\n    })), __jsx(Page, {\n      title: \"Disconnect From Xero\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }\n    }, __jsx(DisconnectForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Main;\nconst wrapper = document.getElementById(\"root\");\nwrapper ? ReactDOM.render(__jsx(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 27\n  }\n}), wrapper) : false;","map":{"version":3,"sources":["/home/thinh/Documents/odoo-13/customaddons/shopify_app/app/pages/index.js"],"names":["Frame","Toast","DataTable","DatePicker","Checkbox","Select","AppProvider","Card","TextField","Button","TextStyle","EmptyState","Form","FormLayout","Layout","Page","React","Component","useState","useCallback","ReactDOM","translations","AppConfig","window","config","console","log","shopify_store","sale_account","AccountSettingForm","constructor","props","state","current_sale_account","current_shipping_account","shipping_account","current_payment_account","payment_account","current_auto_sync","auto_sync","sale_account_options","sale_accounts","map","account","label","name","value","code","shipping_account_options","shipping_accounts","payment_account_options","payment_accounts","handleSaleAccountSelectChange","bind","handleShippingAccountSelectChange","handlePaymentAccountSelectChange","handleAutoSyncChange","setState","SaveSettingUrl","url","render","event","location","href","ExportForm","date","month","Date","getMonth","year","getFullYear","selectedDate","start","end","handleSelectedDates","handleMonthChange","SyncToXeroUrl","from_date","to_date","$","datepicker","formatDate","HistoryTable","logs","orders_synced","store_plan_order_number","showPlanOrderNumber","PlanForm","plans","current_plan_id","store_plan_id","shop_url","showPlanName","plan_id","plan_name","showPlanCost","cost","showPlanDescription","plan","plan_interval_number","plan_order_number","showSignUpPlanButton","buttunId","plan_cost","textAlign","marginTop","top","DisconnectForm","OrganizationName","organisation_name","Main","message","toggleActive","wrapper","document","getElementById"],"mappings":"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","sourcesContent":["import {Frame, Toast, DataTable, DatePicker, Checkbox ,Select, AppProvider, Card,TextField, Button, TextStyle, EmptyState, Form, FormLayout, Layout, Page } from '@shopify/polaris';\nimport React, {Component, useState, useCallback} from 'react';\nimport ReactDOM from \"react-dom\";\nimport '@shopify/polaris/dist/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nconst AppConfig = window.config;\nconsole.log(\"window.config.shopify_store.sale_account: \"+ window.config.shopify_store.sale_account)\n\nclass AccountSettingForm extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            current_sale_account: AppConfig.shopify_store.sale_account,\n            current_shipping_account: AppConfig.shopify_store.shipping_account,\n            current_payment_account: AppConfig.shopify_store.payment_account,\n            current_auto_sync: ((AppConfig.shopify_store.auto_sync == 1) ? true : false),\n            sale_account_options: AppConfig.sale_accounts.map((account) =>(\n                {label: account.name, value: account.code}\n            )),\n            shipping_account_options: AppConfig.shipping_accounts.map((account) =>(\n                {label: account.name, value: account.code}\n            )),\n            payment_account_options: AppConfig.payment_accounts.map((account) =>(\n                {label: account.name, value: account.code}\n            )),\n        };\n        this.handleSaleAccountSelectChange = this.handleSaleAccountSelectChange.bind(this);\n        this.handleShippingAccountSelectChange = this.handleShippingAccountSelectChange.bind(this);\n        this.handlePaymentAccountSelectChange = this.handlePaymentAccountSelectChange.bind(this);\n        this.handleAutoSyncChange = this.handleAutoSyncChange.bind(this);\n    };\n\n    handleSaleAccountSelectChange(value){\n        this.setState({current_sale_account: value});\n    };\n    handleShippingAccountSelectChange(value){\n        this.setState({current_shipping_account: value});\n    };\n    handlePaymentAccountSelectChange(value){\n        this.setState({current_payment_account: value});\n    };\n    handleAutoSyncChange(value){\n        this.setState({current_auto_sync: value});\n    };\n\n    SaveSettingUrl(){\n        var current_sale_account = this.state.current_sale_account\n        var current_shipping_account = this.state.current_shipping_account\n        var current_payment_account = this.state.current_payment_account\n        var current_auto_sync = ''\n        if (this.state.current_auto_sync == true){\n            current_auto_sync = 'True'\n        }\n        let url = '/save_settings?sale_account='+current_sale_account+'&shipping_account='+current_shipping_account+'&payment_account='+current_payment_account+'&auto_sync='+current_auto_sync\n        console.log(\"settings: \"+ url)\n        return url\n    }\n\n    render() {\n        return (\n            <Form>\n                <FormLayout>\n                    <Select name=\"sale_account\" label=\"Sales Account\" options={this.state.sale_account_options} onChange={this.handleSaleAccountSelectChange}\n                            value={this.state.current_sale_account}/>\n                    <Select name=\"shipping_account\" label=\"Shipping Account\" options={this.state.shipping_account_options} onChange={this.handleShippingAccountSelectChange}\n                            value={this.state.current_shipping_account}/>\n                    <Select name=\"payment_account\" label='Payment Account (Account with \"Enable payments to this account\" enabled):' options={this.state.payment_account_options} onChange={this.handlePaymentAccountSelectChange}\n                            value={this.state.current_payment_account}/>\n                    <Checkbox name=\"auto_sync\" label= \"Automatically Sync (at midnight everyday)\" checked={this.state.current_auto_sync}\n                    onChange={this.handleAutoSyncChange}/>\n                    <Button onClick={event =>  location.href=this.SaveSettingUrl()} primary>Save Settings</Button>\n                </FormLayout>\n            </Form>\n        )\n    };\n}\n\nclass ExportForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date:  {month: new Date().getMonth(), year: new Date().getFullYear()},\n            selectedDate: {start: new Date(), end: new Date()}\n        };\n        this.handleSelectedDates = this.handleSelectedDates.bind(this);\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n    }\n\n    handleSelectedDates(value){\n        this.setState({selectedDate: value})\n    }\n    handleMonthChange(value){\n        this.setState({date:value})\n    }\n    SyncToXeroUrl(){\n        let from_date = new Date(this.state.selectedDate.start)\n        let to_date = new Date(this.state.selectedDate.end)\n        from_date = $.datepicker.formatDate('mm/dd/yy', from_date);\n        to_date = $.datepicker.formatDate('mm/dd/yy', to_date);\n        let url = '/sync_to_xero?from_date='+from_date+'&to_date='+to_date\n        return url\n\n    }\n\n    render(){\n        return (\n            <Form>\n                <DatePicker\n                    month={this.state.date.month}\n                    year={this.state.date.year}\n                    onChange={this.handleSelectedDates}\n                    onMonthChange={this.handleMonthChange}\n                    selected={this.state.selectedDate}\n                    multiMonth\n                    allowRange\n                    />\n                <br />\n                <Button onClick={event =>  location.href=this.SyncToXeroUrl()} primary>Export Data</Button>\n            </Form>\n        );\n    }\n}\n\nclass HistoryTable extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            logs: AppConfig.logs,\n            orders_synced: AppConfig.shopify_store.orders_synced,\n            store_plan_order_number: AppConfig.shopify_store.store_plan_order_number,\n        };\n    }\n\n    showPlanOrderNumber(){\n        if (this.state.store_plan_order_number > 0){\n            return this.state.store_plan_order_number\n        }\n        else{\n            return 'Unlimited'\n        }\n    }\n\n    render() {\n        return (\n          <Page>\n              <Card>\n                  <Card.Section>\n                      <p>History log of sync history, including automated jobs.</p>\n                      <p>Orders synced this month: {this.state.orders_synced}</p>\n                      <p>Current Orders per plan: {this.showPlanOrderNumber()}</p>\n                  </Card.Section>\n                  <DataTable\n                      columnContentTypes={[\n                          'datetime',\n                          'datetime',\n                          'text',\n                          'text',\n                      ]}\n                      headings={[\n                          'Excution Time',\n                          'Finish Time',\n                          'Status',\n                          'Message',\n                      ]}\n                      rows={this.state.logs}\n                  />\n              </Card>\n      </Page>\n        );\n    }\n}\n\nclass PlanForm extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            plans: AppConfig.plans,\n            current_plan_id: AppConfig.shopify_store.store_plan_id,\n            shop_url: AppConfig.shop_url,\n        };\n    }\n\n    showPlanName(current_plan_id, plan_id, plan_name){\n        if (current_plan_id == plan_id){\n            return plan_name +\"(Current Plan)\"\n        }\n        else{\n            return plan_name\n        }\n    }\n\n    showPlanCost(cost){\n        if (cost > 0){\n            return <p><i>${cost}/month</i></p>\n        }\n        else{\n            return <p><i>Free</i></p>\n        }\n    }\n\n    showPlanDescription(plan){\n        if (plan.plan_name == \"Essential\"){\n            return (\n                <div>\n                    <p>Sync Customers, Products, Orders to Xero</p>\n                    <p>Manually Sync in date range</p>\n                    <p>Automatic Updates every {plan.plan_interval_number} hours</p>\n                    <p>Account Mapping</p>\n                    <p>Synchronization History</p>\n                    <p>{plan.plan_order_number} Orders/month</p>\n                </div>\n            )\n        }\n        else if (plan.plan_name == \"Standard\"){\n            return (\n                <div>\n                    <p>All Essential Features</p>\n                    <p>Automatic Updates every {plan.plan_interval_number} hours</p>\n                    <p>Sync Gift Cards, Refunds to Xero</p>\n                    <p>{plan.plan_order_number} Orders/month</p>\n                </div>\n            )\n        }\n        else if (plan.plan_name == \"Professional\"){\n            return (\n                <div>\n                    <p>All Standard Features</p>\n                    <p>Automatic Updates every {plan.plan_interval_number} hours</p>\n                    <p>Sync Gift Cards, Refunds to Xero</p>\n                    <p>Unlimited Orders per month</p>\n                </div>\n            )\n        }\n    }\n\n    showSignUpPlanButton(plan, current_plan_id){\n        let buttunId = \"signup\"+plan.plan_id\n        let url = '/sign_up/'+plan.plan_id+'?shop_url='+this.state.shop_url\n        if (plan.plan_cost == 0 || current_plan_id == plan.plan_id  ){\n            return (null);\n        }\n        else{\n            return (\n                <div style={{textAlign: 'center', marginTop: '10px'}}>\n                    <Button id={buttunId} onClick={event =>  window.top.location.href=url} primary >Sign Up</Button>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <Layout>\n                {this.state.plans.map((plan)=>(\n                    <Layout.Section oneThird>\n                        <Card sectioned\n                              title={this.showPlanName(this.state.current_plan_id,plan.plan_id, plan.plan_name )} >\n                            {this.showPlanCost(plan.plan_cost)}\n                            <br/>\n                            {this.showPlanDescription(plan)}\n                            {this.showSignUpPlanButton(plan,this.state.current_plan_id)}\n                        </Card>\n                </Layout.Section>\n                ))}\n            </Layout>\n        )\n    }\n}\n\nclass DisconnectForm extends Component{\n    render() {\n        let OrganizationName = AppConfig.organisation_name\n        return (\n            <Card>\n                <Card.Section>\n                    <p>Organization Name: <TextStyle variation=\"strong\">{OrganizationName}</TextStyle></p>\n\n                    <p>Status:\n                        <TextStyle variation=\"positive\">Connected</TextStyle>\n                    </p>\n                    <Button onClick={event =>  location.href='/disconnect'} destructive>Disconnect From Xero</Button>\n                    <p>Disconnect from Xero. Delete the credentials.</p>\n                    <TextStyle variation=\"subdued\">Note: This will clear all Xero credentials. Cron will not run until you reconnect again.</TextStyle>\n                </Card.Section>\n            </Card>\n        )\n    }\n}\n\nclass Main extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: AppConfig.message,\n        };\n        this.toggleActive = this.toggleActive.bind(this);\n    }\n\n    toggleActive(){\n        this.setState({message: null})\n    }\n\n    render() {\n        let message;\n        if (this.state.message){\n            message = <Toast content={this.state.message} onDismiss={this.toggleActive} />\n        }\n        return (\n            <AppProvider i18n={translations}>\n                <Frame>\n                    {message}\n                    <Page title=\"General Settings\">\n                      <Layout>\n                        <Layout.AnnotatedSection\n                        description={\n                            <p>\n                              Please choose your account accordingly: <br />\n                            - Sales Account will be applied to Invoice Line Items' Account<br />\n                            - Shipping Account will be applied to Shipping as an Invoice Line Item<br />\n                            - Payments will go to Payment Account on Xero\n                            </p>\n                        }\n                            >\n                            <AccountSettingForm />\n                        </Layout.AnnotatedSection>\n                      </Layout>\n                    </Page>\n                    <Page title=\"Export To Xero\">\n                      <Layout>\n                        <Layout.AnnotatedSection\n                        description={\n                            <p>\n                            - Choose date from and date to and export your data to Xero.<br />\n                            - Customers will be synced to Xero as: Shopify - \"Customer Name\" - (\"Customer Id\")<br />\n                            - Invoices will be synced to Xero as: Shopify - \"Order Id\"<br />\n                            - Products will be synced to Xero as Xero Items\n                            </p>\n                        }>\n                            <ExportForm />\n                        </Layout.AnnotatedSection>\n                          </Layout>\n                    </Page>\n                    <Page title=\"History\">\n                      <Layout>\n                          <Layout.Section>\n                            <HistoryTable />\n                        </Layout.Section>\n                      </Layout>\n                    </Page>\n                    <Page title=\"Plans\">\n                        <PlanForm />\n                    </Page>\n                    <Page title=\"Disconnect From Xero\">\n                        <DisconnectForm />\n                    </Page>\n                </Frame>\n            </AppProvider>\n        )\n    }\n\n}\n\nexport default Main;\n\nconst wrapper = document.getElementById(\"root\");\nwrapper ? ReactDOM.render(<Main />, wrapper) : false;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}